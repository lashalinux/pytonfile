მოდი გავიხსენოთ:
Git კი არ ინახავს ფაილების ცხრილოვან ვერსიებს, არამედ ცვლილებებს შორის განსხვავებებს (diff). ამიტომ git diff ერთ-ერთი ყველაზე სასარგებლო ბრძანებაა.

git diff — რას აკეთებს?
გიჩვენებს განსხვავებას:

ფაილის მიმდინარე მდგომარეობასა და ბოლო commit-ს შორის

ორ commit-ს შორის

ორ ფაილს შორის

ძირითადი ვარიანტები:
1. ცვლილებები სამუშაო ფოლდერში (სტაგინგამდე):
bash
კოდის კოპირება
git diff
→ გვიჩვენებს რა შეიცვალა მაგრამ ჯერ არ დაგვიმატებია (git add)

2. ცვლილებები რაც სტაგინგზეა და commit-ისთვის მზად არის:
bash
კოდის კოპირება
git diff --cached
ან

bash
კოდის კოპირება
git diff --staged
→ გვიჩვენებს რა დაემატა სტაგინგზე (git add-ით), მაგრამ ჯერ არ გაკეთებულა commit.

3. ორი commit-ის შედარება:
bash
კოდის კოპირება
git diff commit1 commit2
მაგალითად:

bash
კოდის კოპირება
git diff a1b2c3d 7f8g9h0
→ გვიჩვენებს განსხვავებას ამ ორი commit-ს შორის

4. კონკრეტული ფაილის განსხვავება:
bash
კოდის კოპირება
git diff file.txt
რა ნიშნავს diff-ის შედეგი?
- – წაშლილი ხაზები

+ – დამატებული ხაზები

მაგალითად:

diff
კოდის კოპირება
- ძველი სტრიქონი
+ ახალი სტრიქონი
დამატებითი მაგარი ვარიანტები:
გრაფიკული diff (GitHub სტილში):
bash
კოდის კოპირება
git difftool
→ თუ გაქვს დაყენებული meld, vimdiff, ან სხვა გრაფიკული diff viewer.

როდის უნდა გამოიყენო git diff?
სანამ commit გააკეთებ — რომ ნახო ზუსტად რას აპირებ შენახვას.

ორი commit-ის შედარებისას, რომ ნახო რა შეიცვალა.

როცა ეჭვი გაქვს, რაღაც შეცვალე და არ გახსოვს რა.
