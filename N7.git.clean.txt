1. git commit — commit-ის შესაძლებლობები
git commit არა მხოლოდ ცვლილებების შენახვისთვისაა, არამედ აქვს საინტერესო პარამეტრები, რომლებიც პროცესს უფრო მოქნილს ხდის:

ძირითადი გამოყენება:
bash
კოდის კოპირება
git commit -m "შეტყობინება"
სასარგებლო პარამეტრები:
ბრძანება	რას აკეთებს
-m "შეტყობინება"	დაამატე commit-ის ტექსტი ერთ ხაზად
-a	ავტომატურად დაასთეიჯე ყველა უკვე track-ებული ფაილი (მაგ: .c, .py)
--amend	წინა commit-ის შეცვლა ან დამატება
--no-edit	--amend როცა გინდა წინა commit-ის შეტყობინება უცვლელად დატოვო
-v	commit-ისას გვიჩვენებს რა შეიცვალა (diff) ტექსტში
--allow-empty	აკეთებს commit-ს, თუნდაც არ იყოს ცვლილება
მაგალითები:
ყველა შეცვლილი ფაილის სწრაფი commit-ი:

bash
კოდის კოპირება
git commit -a -m "ცვლილებები ყველასთვის"
წინა commit-ის შეცვლა (მაგალითად, დაივიწყე ფაილის დამატება):

bash
კოდის კოპირება
git add file.txt
git commit --amend
2. git clean — დაურეგისტრირებელი ფაილების წაშლა
git clean გამოიყენება, როცა გაქვს ფაილები ან ფოლდერები, რომლებიც არ არის Git-ში გაწერილი (untracked) და გინდა მათი წაშლა.

შენიშვნა:
საშიში ბრძანებაა — წაშლის ფაილებს სამუდამოდ, თუ არ დაიცავი სიფრთხილე.

ძირითადი გამოყენება:
ბრძანება	რას შვება
git clean -n	აჩვენებს, რას წაშლის (უსაფრთხო)
git clean -f	რეალურად წაშლის ფაილებს
git clean -fd	წაშლის ფაილებს და ფოლდერებს
git clean -fx	წაშლის აგრეთვე .gitignore-ით გამოტოვებულ ფაილებს
მაგალითად:
ჯერ ნახე რას წაშლის:

bash
კოდის კოპირება
git clean -n
შემდეგ რეალურად წაშალე:

bash
კოდის კოპირება
git clean -f
თუ ფოლდერებიც გინდა:

bash
კოდის კოპირება
git clean -fd
შეჯამება:
ბრძანება	დანიშნულება
git commit -a -m	ყველა ცვლილების სწრაფი შენახვა
git commit --amend	წინა commit-ის შეცვლა
git clean -n	ნახე რა წაიშლება
git clean -f	წაშალე untracked ფაილები
git clean -fd	წაშალე untracked ფაილები და ფოლდერები
